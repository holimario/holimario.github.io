<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/07/hello-world/"/>
      <url>/2025/02/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><script type="math/tex; mode=display">\left\{\begin{matrix}f(\vec x)=\frac{\sum\vec x}{2}\\f(\vec x)=\frac{\sum\vec x}{3}\end{matrix}\right.</script><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>missing-semester(1)-shell</title>
      <link href="/2025/02/07/missing-semester/"/>
      <url>/2025/02/07/missing-semester/</url>
      
        <content type="html"><![CDATA[<h2 id="shell基本使用"><a href="#shell基本使用" class="headerlink" title="shell基本使用"></a>shell基本使用</h2><p>如果需要同时输入多个argument，那么如下两种表达是等价的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> Hello<span class="token punctuation">\</span> World$ <span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>机器有其自身的内置函数，这些内置函数是终端系统可以直接执行的，机器通过<strong>环境变量</strong>来定位这些内置函数的位置。如下操作可以显示环境变量的位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在每次执行一次shell指令时，终端都会在上述路径中搜索是否存在对应的函数。linux系统的namespace（路径的根源）一般只有一个，就是root，但是Windows一般有多个Driver作为路径根源。</p><p>显示当前工作路径位置（present working directory）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改变当前工作位置（change directory）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> xxx$ <span class="token builtin class-name">cd</span> - %回到上一次所在的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果环境变量中缺少你想要执行的指令所在的位置，那么可以在执行命令时直接指定其具体位置。</p><p>显示当前所在位置的所有文件（list d）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指令一般可以接受flags（开关）或者options（选择），可以指定一些额外的操作信息，可以用如下方式进行查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token punctuation">[</span>指令<span class="token punctuation">]</span> <span class="token parameter variable">--help</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用如下指令后可以看到文件的具体信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">drwxr-xr-x <span class="token number">1</span> missing  <span class="token function">users</span>  <span class="token number">4096</span> Jun <span class="token number">15</span>  <span class="token number">2019</span> missing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些关于上述文件的具体信息：</p><ul><li><code>d</code>开头表示<code>missing</code>是文件夹</li><li>每3个字符构成的3个组<code>rwx</code>用来依次表示文件所有者、用户组（users）以及其他所有人依次所具有的权限</li><li><code>-</code>表示某种类型的用户不具备相应的权限</li><li>上述信息表明只有文件所有者可以修改，其他用户只可以阅读或者执行</li></ul><p>还有一些常用指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> <span class="token punctuation">[</span>旧名字<span class="token punctuation">]</span> <span class="token punctuation">[</span>新名字<span class="token punctuation">]</span> %对文件进行重命名$ <span class="token function">cp</span> <span class="token punctuation">[</span>原位置<span class="token punctuation">]</span> <span class="token punctuation">[</span>新位置<span class="token punctuation">]</span> %对文件进行复制$ <span class="token function">rm</span> <span class="token punctuation">[</span>文件位置<span class="token punctuation">]</span> %对文件进行删除$ <span class="token function">rmdir</span> <span class="token punctuation">[</span>文件夹<span class="token punctuation">]</span> %仅用于空文件夹的清除$ <span class="token function">mkdir</span> <span class="token punctuation">[</span>文件夹名<span class="token punctuation">]</span> %用于文件夹创建$ <span class="token function">man</span> <span class="token punctuation">[</span>指令或程序<span class="token punctuation">]</span> %显示程序的用户手册，按下q来退出$ ^L %清空终端，回到最上部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建立程序间的连接"><a href="#建立程序间的连接" class="headerlink" title="建立程序间的连接"></a>建立程序间的连接</h2><p>指令一般都有输入流和输出流，<strong>最基本的输入流就是键盘，最基本的输出流就是终端</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token operator">&lt;</span> <span class="token function">file</span> %将file的内容作为输入流$ <span class="token operator">&gt;</span> <span class="token function">file</span> %将输出流写入file（覆写）$ <span class="token builtin class-name">echo</span> hello <span class="token operator">&gt;</span> hello.txt %文件中的内容就是hello$ <span class="token function">cat</span> hello.txt %输出文件内容到终端$ <span class="token function">cat</span> <span class="token operator">&lt;</span> hello.txt %将hello.txt中内容作为cat的输入流$ <span class="token function">cat</span> <span class="token operator">&lt;</span> hello.txt <span class="token operator">&gt;</span> hello2.txt$ <span class="token operator">&gt;&gt;</span> <span class="token function">file</span> %将新信息添加到file中，而不是覆写$    <span class="token operator">|</span>   %pipe, 将左边程序的输出作为右边程序的输入$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> / <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n1</span> %罗列/下的详细文件信息，给到右侧程序，右侧程序筛选出最后1条$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> / <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n1</span> <span class="token operator">&gt;</span> ls.txt$ <span class="token function">curl</span> <span class="token parameter variable">--head</span> <span class="token parameter variable">--silent</span> google.com <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> content-length <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">--delimiter</span><span class="token operator">=</span><span class="token string">' '</span> <span class="token parameter variable">-f2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上可以通过简单的pipe来实现个人媒体直播，将自己的本地文件作为左侧程序，右侧程序则是向互联网发送数据。</p><h2 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h2><p>有时候需要作为root用户执行指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">[</span>指令<span class="token punctuation">]</span> %su意思是super<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过如下操作可以进入机器的内核系统，可以看到众多的内核参数，看起来就像文件系统一样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /sys %进入内核$ <span class="token builtin class-name">cd</span> class$ <span class="token builtin class-name">cd</span> backlight$ <span class="token builtin class-name">echo</span> <span class="token number">500</span> <span class="token operator">&gt;</span> brightness %无法执行，需要root权限$ <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token number">500</span> <span class="token operator">&gt;</span> brightness %仍然无法执行，因为sudo事实上只作用于echo，而没有作用于整个重定向<span class="token comment"># echo 1 &gt; /sys/net/ipv4_forward %加上井字号pound意味着要以root权限来执行该程序，这区别于美元符号</span>$ <span class="token function">sudo</span> <span class="token function">su</span> %执行该命令来切换为root权限<span class="token comment"># exit %退出root权限</span>$ <span class="token builtin class-name">echo</span> <span class="token number">500</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> brightness %如果不切换为root权限，也可以使用这个命令来修改机器背景光，tee可以读取输入流来写入文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下命令可以打开文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">xdg-open</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实践学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
